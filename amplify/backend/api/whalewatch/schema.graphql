type Whale @model{
    id: ID!
    name: String!
    pictures: [Picture] @connection(name: "PictureWhale")
}


type Config @model{
    id: ID!
    value: String
}
type EuclidianDistance @model @key(fields: ["picture"]){
    picture: String!
    distance: Float
    distancePicture: EuclidianDistances @connection(name: "EuclidianDistanceDistances")
}

type EuclidianDistances @model @key(fields: ["picture"]){
    picture: String!
    distances: [EuclidianDistance] @connection(name: "EuclidianDistanceDistances")
}

type Picture @model{
    id: ID!
    is_new: Boolean
    high_res: String
    thumbnail: String
    filename: String
    whale: Whale @connection(name: "PictureWhale")
    geocoords: String
    date_taken: String
    embedding: String
    uploaded_by: String
    matchLeft: Match @connection(name: "MatchLeftPicture")
    matchRight: Match @connection(name: "MatchRightPicture")
}

type Match @model{
    picture1: Picture! @connection(name: "MatchLeftPicture")
    picture2: Picture! @connection(name: "MatchRightPicture")
    match_status: String
    similarity_score: Int
}

type Image {
	name: String!
}

type MatchingImage @model{
  id: ID!
  image: Image
  matchingImages: [Image]
}

#type User @model {
#  id: ID!
#  name: String
#  surname: String
#  email: String!
#  password: String!
#	}